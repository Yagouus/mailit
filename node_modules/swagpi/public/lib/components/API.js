const isOptionalParam = (type, obj) => {
	let required = (obj && obj.optional === false || type === 'param') ? true : false;
	return !required;
}

const ParamOrQueryRow = (type, key, parent, showOptional) => {
	let obj = parent[key];
	let required = (obj && obj.optional === false || type === 'param') ? 'required' : '';
	let description = (typeof obj === 'string') ? obj : obj.description;
	let $input = $(`
		<div class='param input ${key} ${required}'>
			<div class='float'><input type="text" placeholder='${key}' class='input-${key}' /></div>
			<div class='float'>${description}</div>
		</div>
	`);
	$input.find('input').on('keyup', e => {
		let val = $(e.currentTarget).val();
		if (typeof obj === 'string') {
			parent[key] = {description: obj};
		}
		parent[key].value = val;
	});
	return $input;
}

const Parameters = (obj) => {
	let params = obj.params;
	let showOptional = obj.showOptional;
	if (!params || Object.keys(params).length < 1) {
		return $('<div></div>');
	}
	let $params = $(`
		<div>
			<h3>URL Parameters</h3>
		</div>
	`);
	params = params || {}
	for (const key in params) {
		let $param = ParamOrQueryRow('param', key, params, showOptional);
		$params.append($param);
	}
	return $params;
}

const Queries = (obj) => {
	let queries = obj.queries;
	const showOptional = obj.showOptional;
	if (!queries || Object.keys(queries).length < 1) {
		return $('<div></div>');
	}
	let $queries = $(`
		<div><h3>${((obj.verb === 'GET') ? 'Query Parameters' : 'Request Body')}</h3></div>
	`);
	let optionals = 0;
	queries = queries || {};
	for (const key in queries) {
		let optional = isOptionalParam('query', queries[key]);
		let $query = ParamOrQueryRow('query', key, queries);
		$queries.append($query);
		if (optional && !showOptional) {
			$query.css('display', 'none');
			optionals++;
		}
	}
	if (optionals > 0) {
		let $optionals = $(`<div class='hint'>Show ${optionals} optional items</div>`);
		$optionals.on('click', e => {
			$optionals.css('display', 'none');
			$queries.find('.param').css('display', 'block');
		});
		$queries.append($optionals);
	}
	return $queries;
}

const Item = (o) => {
	const id = o.id;
	let route = o.route;
	let $params = Parameters(o, o.showOptional);
	let $queries = Queries(o, o.showOptional);
	let $item = $(`
		<div class='item' action="${id}" id='${slug(o.title)}'>
			<div class='left'>
				<div class='item-header'>${o.title}</div>
				<span class='route'>${o.verb} ${route}</span>
				<div class='description'>${o.description}</div>
				<button class='submit'>Run</button>
				<div class='params'></div>
				<div class='queries'></div>
			</div>
			<div class='right'>
				foo bar
			</div>
		</div>
	`);

	$item.find('.params').append($params);
	$item.find('.queries').append($queries);

	const runItem = (o) => {
		let route = buildRoute(o);
		let invalids = validateRoute(o);
		if (invalids.length > 0) {
			invalids.forEach(name => {
				$item.find(`.param.${name}`).addClass('invalid');
			});
			return;
		}
		$item.find(`.param`).removeClass('invalid');
		runQuery(route);
	}

	$item.find('input').on('keyup', (e) => {
		let route = buildRoute(o);
		$item.find('.route').html(route.verb + ' ' + route.url);
	});

	$item.find('input').on('keypress', (e) => {
		if (e.keyCode === 10) {
			runItem(o);
		}
	});

	$item.find('button').on('click', (e) => {
		runItem(o);
	});

	return $item;
}

const Subject = (name, data) => {
	let $subject = $(`
		<div class='subject ${name}' id='${slug(name)}'>
			<div class='subject-header ${name}' id='${slug(name)}'>${name}</div>
		</div>
	`);
	data.forEach(o => {
		$item = Item(o);
		$subject.append($item);
	});

	return $subject;
}
